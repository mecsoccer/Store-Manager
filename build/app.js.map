{"version":3,"sources":["../server/app.js"],"names":["dotenv","config","app","use","express","json","urlencoded","extended","req","res","next","header","userRouter","productRouter","saleRouter","err","locals","message","error","get","status","render","port","process","env","PORT","set","server","http","createServer","listen","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,gBAAOC,MAAP;;AAEA,IAAMC,GAAG,GAAG,uBAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,qBAAO,KAAP,CAAR;AACAD,GAAG,CAACC,GAAJ,CAAQC,iBAAQC,IAAR,EAAR;AACAH,GAAG,CAACC,GAAJ,CAAQC,iBAAQE,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACAL,GAAG,CAACC,GAAJ,CAAQ,4BAAR;AACAD,GAAG,CAACC,GAAJ,CAAQ,UAACK,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1BD,EAAAA,GAAG,CAACE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,EAAAA,GAAG,CAACE,MAAJ,CAAW,kCAAX,EAA+C,MAA/C;AACAF,EAAAA,GAAG,CAACE,MAAJ,CAAW,8BAAX,EAA2C,6BAA3C;AACAF,EAAAA,GAAG,CAACE,MAAJ,CAAW,8BAAX,EAA2C,iCAA3C;AACAD,EAAAA,IAAI;AACL,CAND;AAQAR,GAAG,CAACC,GAAJ,CAAQ,cAAR,EAAwBS,mBAAxB;AACAV,GAAG,CAACC,GAAJ,CAAQ,eAAR,EAAyBS,mBAAzB;AACAV,GAAG,CAACC,GAAJ,CAAQ,kBAAR,EAA4BU,sBAA5B;AACAX,GAAG,CAACC,GAAJ,CAAQ,eAAR,EAAyBW,mBAAzB,E,CAEA;;AACAZ,GAAG,CAACC,GAAJ,CAAQ,UAACK,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1BA,EAAAA,IAAI,CAAC,yBAAY,GAAZ,CAAD,CAAJ;AACD,CAFD,E,CAIA;;AACAR,GAAG,CAACC,GAAJ,CAAQ,UAACY,GAAD,EAAMP,GAAN,EAAWC,GAAX,EAAmB;AACzB;AACAA,EAAAA,GAAG,CAACO,MAAJ,CAAWC,OAAX,GAAqBF,GAAG,CAACE,OAAzB;AACAR,EAAAA,GAAG,CAACO,MAAJ,CAAWE,KAAX,GAAmBV,GAAG,CAACN,GAAJ,CAAQiB,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCJ,GAAvC,GAA6C,EAAhE,CAHyB,CAKzB;;AACAN,EAAAA,GAAG,CAACW,MAAJ,CAAWL,GAAG,CAACK,MAAJ,IAAc,GAAzB;AACAX,EAAAA,GAAG,CAACY,MAAJ,CAAW,OAAX;AACD,CARD;AAUA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,MAAjC;AACAvB,GAAG,CAACwB,GAAJ,CAAQ,MAAR,EAAgBJ,IAAhB;;AAEA,IAAMK,MAAM,GAAGC,cAAKC,YAAL,CAAkB3B,GAAlB,CAAf;;AACAyB,MAAM,CAACG,MAAP,CAAcR,IAAd;AAEAS,MAAM,CAACC,OAAP,GAAiB9B,GAAjB","sourcesContent":["import http from 'http';\r\nimport createError from 'http-errors';\r\nimport express from 'express';\r\nimport cookieParser from 'cookie-parser';\r\nimport logger from 'morgan';\r\nimport dotenv from 'dotenv';\r\nimport userRouter from './routes/userRoutes';\r\nimport productRouter from './routes/productRoutes';\r\nimport saleRouter from './routes/saleRoutes';\r\n\r\ndotenv.config();\r\n\r\nconst app = express();\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use((req, res, next) => {\r\n  res.header('Access-Control-Allow-Origin', '*');\r\n  res.header('Access-Control-Allow-Credentials', 'true');\r\n  res.header('Access-Control-Allow-Headers', 'Content-type, Authorization');\r\n  res.header('Access-Control-Allow-Methods', 'POST, OPTIONS, GET, PUT, DELETE');\r\n  next();\r\n});\r\n\r\napp.use('/api/v1/auth', userRouter);\r\napp.use('/api/v1/users', userRouter);\r\napp.use('/api/v1/products', productRouter);\r\napp.use('/api/v1/sales', saleRouter);\r\n\r\n// catch 404 and forward to error handler\r\napp.use((req, res, next) => {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use((err, req, res) => {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\n\r\nconst port = process.env.PORT || '3000';\r\napp.set('port', port);\r\n\r\nconst server = http.createServer(app);\r\nserver.listen(port);\r\n\r\nmodule.exports = app;\r\n"],"file":"app.js"}