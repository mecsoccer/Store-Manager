{"version":3,"sources":["../../../server/middlewares/verify/verify.js"],"names":["dotenv","config","secret","process","env","SECRET_KEY","verifyAdmin","req","res","next","role","authData","status","json","message","verifyAttendant","authVerify","authorization","headers","error","jwt","verify","err"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEAA,gBAAOC,MAAP;;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAA3B;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqC;AAAA,MAC3BC,IAD2B,GAClBH,GAAG,CAACI,QADc,CAC3BD,IAD2B;;AAGnC,MAAIA,IAAI,KAAK,OAAb,EAAsB;AACpB,WAAOD,IAAI,EAAX;AACD;;AACD,SAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAP;AACD;;AAED,SAASC,eAAT,CAAyBR,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AAAA,MAC/BC,IAD+B,GACtBH,GAAG,CAACI,QADkB,CAC/BD,IAD+B;;AAGvC,MAAIA,IAAI,KAAK,WAAb,EAA0B;AACxB,WAAOD,IAAI,EAAX;AACD;;AACD,SAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAP;AACD;;AAED,SAASE,UAAT,CAAoBT,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AAAA,MAC1BQ,aAD0B,GACRV,GAAG,CAACW,OADI,CAC1BD,aAD0B;;AAGlC,MAAI,CAACA,aAAL,EAAoB;AAClB,WAAOT,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,OAAO,EAAE,6BADiB;AAE1BK,MAAAA,KAAK,EAAE;AAFmB,KAArB,CAAP;AAID;;AAEDC,wBAAIC,MAAJ,CAAWJ,aAAX,EAA0Bf,MAA1B,EAAkC,UAACoB,GAAD,EAAMX,QAAN,EAAmB;AACnD,QAAIW,GAAJ,EAAS;AACP,aAAOd,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,OAAO,EAAE,sCADiB;AAE1BK,QAAAA,KAAK,EAAE;AAFmB,OAArB,CAAP;AAID;;AACDZ,IAAAA,GAAG,CAACI,QAAJ,GAAeA,QAAf;AACD,GARD;;AAUA,SAAOF,IAAI,EAAX;AACD;;eAEc;AAAEH,EAAAA,WAAW,EAAXA,WAAF;AAAeS,EAAAA,eAAe,EAAfA,eAAf;AAAgCC,EAAAA,UAAU,EAAVA;AAAhC,C","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst secret = process.env.SECRET_KEY;\r\n\r\nfunction verifyAdmin(req, res, next) {\r\n  const { role } = req.authData;\r\n\r\n  if (role === 'admin') {\r\n    return next();\r\n  }\r\n  return res.status(401).json({ message: 'Sorry, accessible to admin only' });\r\n}\r\n\r\nfunction verifyAttendant(req, res, next) {\r\n  const { role } = req.authData;\r\n\r\n  if (role === 'attendant') {\r\n    return next();\r\n  }\r\n  return res.status(401).json({ message: 'Sorry, accessible to store attendants only' });\r\n}\r\n\r\nfunction authVerify(req, res, next) {\r\n  const { authorization } = req.headers;\r\n\r\n  if (!authorization) {\r\n    return res.status(401).json({\r\n      message: 'Please, you have to sign in',\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  jwt.verify(authorization, secret, (err, authData) => {\r\n    if (err) {\r\n      return res.status(401).json({\r\n        message: 'You must provide valid authorization',\r\n        error: true,\r\n      });\r\n    }\r\n    req.authData = authData;\r\n  });\r\n\r\n  return next();\r\n}\r\n\r\nexport default { verifyAdmin, verifyAttendant, authVerify };\r\n"],"file":"verify.js"}