{"version":3,"sources":["../../../../server/middlewares/validation/library/validationLibrary.js"],"names":["validate","field","input","min","max","regEx","example","required","message","length","test"],"mappings":";;;;;;;;;;;;;IAAMA,Q;;;;;;;;;sCACqBC,K,EAAOC,K,EAA2D;AAAA,UAApDC,GAAoD,uEAA9C,CAA8C;AAAA,UAA3CC,GAA2C,uEAArC,EAAqC;AAAA,UAAjCC,KAAiC;AAAA,UAA1BC,OAA0B;AAAA,UAAjBC,QAAiB,uEAAN,IAAM;AACzF,UAAIC,OAAO,GAAG,EAAd;AAEA;;AAAwB,UAAID,QAAQ,KAAK,KAAjB,EAAwB;AAC9CC,QAAAA,OAAO,GAAG,IAAV;AACD,OAFuB,MAEjB,IAAI,CAACN,KAAL,EAAY;AACjBM,QAAAA,OAAO,aAAMP,KAAN,sBAAP;AACD,OAFM,MAEA,IAAIC,KAAK,CAACO,MAAN,GAAeN,GAAf,IAAsBD,KAAK,CAACO,MAAN,GAAeL,GAAzC,EAA8C;AACnDI,QAAAA,OAAO,aAAMP,KAAN,uCAAwCE,GAAxC,kBAAmDC,GAAnD,CAAP;AACD,OAFM,MAEA,IAAIC,KAAK,CAACK,IAAN,CAAWR,KAAX,MAAsB,KAA1B,EAAiC;AACtCM,QAAAA,OAAO,mBAAYP,KAAZ,8BAAqCA,KAArC,gBAAgDK,OAAhD,CAAP;AACD,OAFM,MAEA;AACLE,QAAAA,OAAO,GAAG,IAAV;AACD;;AAED,aAAOA,OAAP;AACD;;;wCAE0BP,K,EAAOC,K,EAAOC,G,EAAKC,G,EAAKC,K,EAAOC,O,EAA0B;AAAA,UAAjBC,QAAiB,uEAAN,IAAM;AAClF,UAAIC,OAAO,GAAG,EAAd;AAEA;;AAAwB,UAAID,QAAQ,KAAK,KAAjB,EAAwB;AAC9CC,QAAAA,OAAO,GAAG,IAAV;AACD,OAFuB,MAEjB,IAAI,CAACN,KAAL,EAAY;AACjBM,QAAAA,OAAO,mBAAYP,KAAZ,sBAAP;AACD,OAFM,MAEA,IAAIC,KAAK,GAAGC,GAAR,IAAeD,KAAK,GAAGE,GAA3B,EAAgC;AACrCI,QAAAA,OAAO,aAAMP,KAAN,yCAA0CE,GAA1C,kBAAqDC,GAArD,CAAP;AACD,OAFM,MAEA,IAAIC,KAAK,CAACK,IAAN,CAAWR,KAAX,MAAsB,KAA1B,EAAiC;AACtCM,QAAAA,OAAO,mBAAYP,KAAZ,8BAAqCA,KAArC,gBAAgDK,OAAhD,CAAP;AACD,OAFM,MAEA;AACL,eAAO,IAAP;AACD;;AAED,aAAOE,OAAP;AACD;;;;;;eAGYR,Q","sourcesContent":["class validate {\r\n  static validateTextField(field, input, min = 2, max = 10, regEx, example, required = true) {\r\n    let message = '';\r\n\r\n    /* istanbul ignore if */if (required === false) {\r\n      message = true;\r\n    } else if (!input) {\r\n      message = `${field} must be included`;\r\n    } else if (input.length < min || input.length > max) {\r\n      message = `${field} length should be between ${min} and ${max}`;\r\n    } else if (regEx.test(input) === false) {\r\n      message = `wrong ${field} format. example ${field}s: ${example}`;\r\n    } else {\r\n      message = true;\r\n    }\r\n\r\n    return message;\r\n  }\r\n\r\n  static validateNumberField(field, input, min, max, regEx, example, required = true) {\r\n    let message = '';\r\n\r\n    /* istanbul ignore if */if (required === false) {\r\n      message = true;\r\n    } else if (!input) {\r\n      message = `input ${field} must be included`;\r\n    } else if (input < min || input > max) {\r\n      message = `${field} should be a number between ${min} and ${max}`;\r\n    } else if (regEx.test(input) === false) {\r\n      message = `wrong ${field} format. example ${field}s: ${example}`;\r\n    } else {\r\n      return true;\r\n    }\r\n\r\n    return message;\r\n  }\r\n}\r\n\r\nexport default validate;\r\n"],"file":"validationLibrary.js"}