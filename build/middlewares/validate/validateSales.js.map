{"version":3,"sources":["../../../server/middlewares/validate/validateSales.js"],"names":["validateSales","req","res","next","body","seller","productName","quantitySold","price","total","productId","sellerExp","productNameExp","monetaryExp","integerExp","test","status","json","error","message"],"mappings":";;;;;;;AAAA,SAASA,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,IAAjC,EAAuC;AAAA,kBAGjCF,GAAG,CAACG,IAH6B;AAAA,MAEnCC,MAFmC,aAEnCA,MAFmC;AAAA,MAE3BC,WAF2B,aAE3BA,WAF2B;AAAA,MAEdC,YAFc,aAEdA,YAFc;AAAA,MAEAC,KAFA,aAEAA,KAFA;AAAA,MAEOC,KAFP,aAEOA,KAFP;AAAA,MAEcC,SAFd,aAEcA,SAFd;AAKrC,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,cAAc,GAAG,QAAvB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,UAAU,GAAG,OAAnB;;AAEA,MAAIH,SAAS,CAACI,IAAV,CAAeV,MAAf,MAA2B,KAA/B,EAAsC;AACpC,WAAOH,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,KAAK,EAAE,IADmB;AAE1BC,MAAAA,OAAO,EAAE;AAFiB,KAArB,CAAP;AAID;;AAED,MAAIP,cAAc,CAACG,IAAf,CAAoBT,WAApB,MAAqC,KAAzC,EAAgD;AAC9C,WAAOJ,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,KAAK,EAAE,IADmB;AAE1BC,MAAAA,OAAO,EAAE;AAFiB,KAArB,CAAP;AAID;;AAED,MAAIL,UAAU,CAACC,IAAX,CAAgBR,YAAhB,MAAkC,KAAtC,EAA6C;AAC3C,WAAOL,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,KAAK,EAAE,IADmB;AAE1BC,MAAAA,OAAO,EAAE;AAFiB,KAArB,CAAP;AAID;;AAED,MAAIN,WAAW,CAACE,IAAZ,CAAiBP,KAAjB,MAA4B,KAAhC,EAAuC;AACrC,WAAON,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,KAAK,EAAE,IADmB;AAE1BC,MAAAA,OAAO,EAAE;AAFiB,KAArB,CAAP;AAID;;AAED,MAAIN,WAAW,CAACE,IAAZ,CAAiBN,KAAjB,MAA4B,KAAhC,EAAuC;AACrC,WAAOP,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,KAAK,EAAE,IADmB;AAE1BC,MAAAA,OAAO,EAAE;AAFiB,KAArB,CAAP;AAID;;AAED,MAAIL,UAAU,CAACC,IAAX,CAAgBL,SAAhB,MAA+B,KAAnC,EAA0C;AACxC,WAAOR,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,KAAK,EAAE,IADmB;AAE1BC,MAAAA,OAAO,EAAE;AAFiB,KAArB,CAAP;AAID;;AAED,SAAOhB,IAAI,EAAX;AACD;;eAEcH,a","sourcesContent":["function validateSales(req, res, next) {\r\n  const {\r\n    seller, productName, quantitySold, price, total, productId,\r\n  } = req.body;\r\n\r\n  const sellerExp = /^[a-z]+$/g;\r\n  const productNameExp = /^\\w+$/g;\r\n  const monetaryExp = /^\\d+\\.\\d\\d$/;\r\n  const integerExp = /^\\d+$/;\r\n\r\n  if (sellerExp.test(seller) === false) {\r\n    return res.status(422).json({\r\n      error: true,\r\n      message: 'seller should be a lowercase name without spaces eg. john',\r\n    });\r\n  }\r\n\r\n  if (productNameExp.test(productName) === false) {\r\n    return res.status(422).json({\r\n      error: true,\r\n      message: \"product name must be a string preceeded by alphabets and can contain spaces, underscores, alphabets, numbers eg. 'dangote cement_50kg'\",\r\n    });\r\n  }\r\n\r\n  if (integerExp.test(quantitySold) === false) {\r\n    return res.status(422).json({\r\n      error: true,\r\n      message: 'quantitySold must be an integer.',\r\n    });\r\n  }\r\n\r\n  if (monetaryExp.test(price) === false) {\r\n    return res.status(422).json({\r\n      error: true,\r\n      message: \"price must be a number having two decimal places enclosed in quotes eg. '20.00'\",\r\n    });\r\n  }\r\n\r\n  if (monetaryExp.test(total) === false) {\r\n    return res.status(422).json({\r\n      error: true,\r\n      message: \"total must be a number having two decimal places enclosed in quotes eg. '20.00'\",\r\n    });\r\n  }\r\n\r\n  if (integerExp.test(productId) === false) {\r\n    return res.status(422).json({\r\n      error: true,\r\n      message: 'productId must be an integer.',\r\n    });\r\n  }\r\n\r\n  return next();\r\n}\r\n\r\nexport default validateSales;\r\n"],"file":"validateSales.js"}