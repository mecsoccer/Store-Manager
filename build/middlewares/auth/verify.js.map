{"version":3,"sources":["../../../server/middlewares/auth/verify.js"],"names":["dotenv","config","secret","process","env","SECRET_KEY","authVerify","req","res","next","authorization","headers","jwt","verify","err","authData","status","json","error","verifyAdmin","role","verifyAttendant","verifyAdminOrSeller","saleId","params","username","pool","query","then","salesArray","sale","rows","seller","catch"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport dotenv from 'dotenv';\r\nimport pool from '../../models/database';\r\n\r\ndotenv.config();\r\n\r\nconst secret = process.env.SECRET_KEY;\r\n\r\nfunction authVerify(req, res, next) {\r\n  const { authorization } = req.headers;\r\n\r\n  if (authorization) {\r\n    jwt.verify(authorization, secret, (err, authData) => {\r\n      if (err) {\r\n        res.status(401).json({ error: 'please provide valid token' });\r\n      }\r\n      if (authData) {\r\n        req.authData = authData;\r\n        next();\r\n      }\r\n    });\r\n  } else {\r\n    res.status(401).json({ error: 'please, you have to sign in' });\r\n  }\r\n}\r\n\r\nfunction verifyAdmin(req, res, next) {\r\n  const { role } = req.authData;\r\n\r\n  if (role === 'admin') {\r\n    next();\r\n  } else {\r\n    res.status(403).json({ error: 'Sorry, accessible to admin only' });\r\n  }\r\n}\r\n\r\nfunction verifyAttendant(req, res, next) {\r\n  const { role } = req.authData;\r\n\r\n  if (role === 'attendant') {\r\n    next();\r\n  } else {\r\n    res.status(403).json({ error: 'Sorry, accessible to store attendants only' });\r\n  }\r\n}\r\n\r\nfunction verifyAdminOrSeller(req, res, next) {\r\n  const { saleId } = req.params;\r\n  const { username, role } = req.authData;\r\n\r\n  pool.query('SELECT * FROM sales WHERE id=$1;', [saleId])\r\n    .then((salesArray) => {\r\n      const sale = salesArray.rows[0];\r\n      if (!sale) {\r\n        res.status(404).json({ error: 'sale record does not exist' });\r\n      } else if (sale.seller === username || role === 'admin') {\r\n        next();\r\n      } else {\r\n        res.status(403).json({ error: 'sorry, resource accessible to seller and admin only' });\r\n      }\r\n    })\r\n    .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n}\r\n\r\nexport default {\r\n  authVerify, verifyAdmin, verifyAttendant, verifyAdminOrSeller,\r\n};\r\n"],"file":"verify.js"}