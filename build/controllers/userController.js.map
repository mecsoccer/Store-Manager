{"version":3,"sources":["../../server/controllers/userController.js"],"names":["dotenv","config","secret","process","env","SECRET_KEY","getAllUsers","req","res","query","text","values","pool","then","users","allUsers","rows","status","json","catch","err","getUser","userId","params","requestedUser","user","addUser","body","username","password","email","salt","bcrypt","genSaltSync","hash","hashSync","newAttendant","login","token","jwt","sign","expiresIn","foundUser","compareSync","error","message","updateUser","productSold","noOfSales","worthOfSales","updatedUser","deleteUser","deletedUser","giveAdminRight","role","adminUser"],"mappings":"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","file":"userController.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcryptjs';\r\nimport dotenv from 'dotenv';\r\nimport pool from '../models/migration';\r\n\r\ndotenv.config();\r\n\r\nconst secret = process.env.SECRET_KEY;\r\n\r\nfunction getAllUsers(req, res) {\r\n  const query = {\r\n    text: 'SELECT * FROM users',\r\n    values: [],\r\n  };\r\n\r\n  pool.query(query)\r\n    .then((users) => {\r\n      const allUsers = users.rows;\r\n      res.status(200).json({ allUsers });\r\n    })\r\n    .catch((err) => {\r\n      res.status(500).json(err);\r\n    });\r\n}\r\n\r\nfunction getUser(req, res) {\r\n  const { userId } = req.params;\r\n\r\n  const query = {\r\n    text: 'SELECT * FROM users WHERE id = $1;',\r\n    values: [userId],\r\n  };\r\n\r\n  pool.query(query)\r\n    .then((requestedUser) => {\r\n      const user = requestedUser.rows[0];\r\n      return res.status(200).json({ user });\r\n    })\r\n    .catch((err) => {\r\n      res.status(500).json(err);\r\n    });\r\n}\r\n\r\nfunction addUser(req, res) {\r\n  const { username, password, email } = req.body;\r\n\r\n  const salt = bcrypt.genSaltSync(10);\r\n  const hash = bcrypt.hashSync(password, salt);\r\n\r\n  const query = {\r\n    text: 'INSERT INTO users(username, password, email, productSold, noOfSales, worthOfSales) VALUES($1, $2, $3, $4, $5, $6) RETURNING *',\r\n    values: [username, hash, email, 0, 0, 0],\r\n  };\r\n\r\n  pool.query(query)\r\n    .then((user) => {\r\n      const newAttendant = user.rows[0];\r\n      return res.status(201).json({ newAttendant });\r\n    })\r\n    .catch((err) => {\r\n      res.status(500).json(err);\r\n    });\r\n}\r\n\r\nfunction login(req, res) {\r\n  const { username, password } = req.body;\r\n\r\n  const token = jwt.sign(req.body, secret, { expiresIn: '1hr' });\r\n\r\n  const query = {\r\n    text: 'SELECT * FROM users WHERE username = $1',\r\n    values: [username],\r\n  };\r\n\r\n  pool.query(query)\r\n    .then((user) => {\r\n      const foundUser = user.rows[0];\r\n      if (!bcrypt.compareSync(password, foundUser.password)) {\r\n        return res.status(401).json({ error: true, message: 'sorry username and password have no match' });\r\n      }\r\n      return res.status(200).json({ username, token });\r\n    })\r\n    .catch(() => {\r\n      const [error, message] = [true, 'sorry username and password have no match'];\r\n      return res.status(401).json({ error, message });\r\n    });\r\n}\r\n\r\nfunction updateUser(req, res) {\r\n  const {\r\n    username, productSold, noOfSales, worthOfSales,\r\n  } = req.body;\r\n  const { userId } = req.params;\r\n\r\n  const query = {\r\n    text: 'UPDATE users SET productSold = $1,noOfSales =$2,worthOfSales = $3 WHERE username = $4 AND id = $5;',\r\n    values: [productSold, noOfSales, worthOfSales, username, userId],\r\n  };\r\n\r\n  pool.query(query)\r\n    .then((user) => {\r\n      const updatedUser = user;\r\n      return res.status(200).json({ updatedUser });\r\n    })\r\n    .catch((err) => {\r\n      res.status(500).json(err);\r\n    });\r\n}\r\n\r\nfunction deleteUser(req, res) {\r\n  const { userId } = req.params;\r\n  const { username } = req.body;\r\n\r\n  const query = {\r\n    text: 'DELETE FROM users WHERE id = $1 AND username = $2;',\r\n    values: [userId, username],\r\n  };\r\n\r\n  pool.query(query)\r\n    .then((user) => {\r\n      const deletedUser = user;\r\n      return res.status(200).json({ deletedUser });\r\n    })\r\n    .catch((err) => {\r\n      res.status(200).json(err);\r\n    });\r\n}\r\n\r\nfunction giveAdminRight(req, res) {\r\n  const { userId } = req.params;\r\n  const { username, role } = req.body;\r\n\r\n  const query = {\r\n    text: 'UPDATE users SET role=$1 WHERE id=$2 and username=$3;',\r\n    values: [role, userId, username],\r\n  };\r\n\r\n  pool.query(query)\r\n    .then((user) => {\r\n      const adminUser = user;\r\n      return res.status(200).json({ adminUser });\r\n    })\r\n    .catch((err) => {\r\n      res.status(500).json(err);\r\n    });\r\n}\r\n\r\nexport default {\r\n  addUser, login, getAllUsers, getUser, updateUser, deleteUser, giveAdminRight,\r\n};\r\n"]}