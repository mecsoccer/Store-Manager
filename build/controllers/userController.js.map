{"version":3,"sources":["../../server/controllers/userController.js"],"names":["dotenv","config","secret","process","env","SECRET_KEY","getAllUsers","req","res","pool","query","then","users","allUsers","rows","status","json","catch","err","getUser","userId","params","requestedUser","user","Promise","reject","error","addUser","body","username","password","email","role","salt","bcrypt","genSaltSync","hash","hashSync","text","values","newAttendant","login","usernameInput","passwordInput","foundUser","authenticated","compareSync","token","jwt","sign","expiresIn","updateUserData","hashPassword","userArray","updatedUser","deleteUser","deletedUser","id","giveAdminRight","admin","adminUser","newAdmin","errorId"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcryptjs';\r\nimport dotenv from 'dotenv';\r\nimport pool from '../models/migration';\r\n\r\ndotenv.config();\r\n\r\nconst secret = process.env.SECRET_KEY;\r\n\r\nfunction getAllUsers(req, res) {\r\n  pool.query('SELECT * FROM users')\r\n    .then((users) => {\r\n      const allUsers = users.rows;\r\n      res.status(200).json({ allUsers });\r\n    })\r\n    .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n}\r\n\r\nfunction getUser(req, res) {\r\n  const { userId } = req.params;\r\n\r\n  pool.query('SELECT * FROM users WHERE id = $1;', [userId])\r\n    .then((requestedUser) => {\r\n      const user = requestedUser.rows[0];\r\n      /* istanbul ignore next */return !user ? Promise.reject() : user;\r\n    })\r\n    .then((user) => {\r\n      res.status(200).json({ user });\r\n    })\r\n    .catch(() => {\r\n      res.status(404).json({ error: `user id, ${userId} does not exist` });\r\n    });\r\n}\r\n\r\nfunction addUser(req, res) {\r\n  const {\r\n    username, password, email, role,\r\n  } = req.body;\r\n\r\n  const salt = bcrypt.genSaltSync(10);\r\n  const hash = bcrypt.hashSync(password, salt);\r\n\r\n  const query = {\r\n    text: 'INSERT INTO users(username, password, email, role) VALUES($1, $2, $3, $4) RETURNING *',\r\n    values: [username, hash, email, role],\r\n  };\r\n\r\n  pool.query(query)\r\n    .then((user) => {\r\n      const newAttendant = user.rows[0];\r\n      res.status(201).json({ newAttendant });\r\n    })\r\n    .catch(() => {\r\n      res.status(422).json({ error: 'data with same username already exists' });\r\n    });\r\n}\r\n\r\nfunction login(req, res) {\r\n  const { usernameInput, passwordInput } = req.body;\r\n\r\n  pool.query('SELECT * FROM users WHERE username = $1', [usernameInput])\r\n    .then((user) => {\r\n      const foundUser = user.rows[0];\r\n      const authenticated = bcrypt.compareSync(passwordInput, foundUser.password);\r\n      /* istanbul ignore next */return (!authenticated) ? Promise.reject() : foundUser;\r\n    })\r\n    .then((foundUser) => {\r\n      const { username, password, role } = foundUser;\r\n      const token = jwt.sign({ username, password, role }, secret, { expiresIn: '1hr' });\r\n      res.status(200).json({ username, role, token });\r\n    })\r\n    .catch(() => {\r\n      res.status(401).json({ error: 'incorrect username or password' });\r\n    });\r\n}\r\n\r\nfunction updateUserData(req, res) {\r\n  const { userId } = req.params;\r\n  const {\r\n    username, password, email, role,\r\n  } = req.body;\r\n\r\n  const hashPassword = bcrypt.hashSync(password, 10);\r\n\r\n  const text = 'UPDATE users SET username=$1, password=$2, email=$3, role=$4 WHERE id=$5 RETURNING *;';\r\n  const values = [\r\n    username, hashPassword, email, role, userId,\r\n  ];\r\n\r\n  pool.query(text, values)\r\n    .then((userArray) => {\r\n      const user = userArray.rows[0];\r\n      /* istanbul ignore next */return !user ? Promise.reject() : user;\r\n    })\r\n    .then((updatedUser) => {\r\n      res.status(200).json({ updatedUser });\r\n    })\r\n    .catch(() => {\r\n      res.status(422).json({ error: 'unnable to complete request. choose another username or new id' });\r\n    });\r\n}\r\n\r\nfunction deleteUser(req, res) {\r\n  const { userId } = req.params;\r\n\r\n  const text = 'DELETE FROM users WHERE id = $1 returning *;';\r\n  const values = [userId];\r\n\r\n  pool.query(text, values)\r\n    .then((user) => {\r\n      const deletedUser = user.rows[0];\r\n      /* istanbul ignore next */return !deletedUser ? Promise.reject(userId) : deletedUser;\r\n    })\r\n    .then((deletedUser) => {\r\n      res.status(200).json({ deletedUser });\r\n    })\r\n    .catch((id) => {\r\n      res.status(404).json({ error: `user id, ${id} does not exist` });\r\n    });\r\n}\r\n\r\nfunction giveAdminRight(req, res) {\r\n  const { userId } = req.params;\r\n  const { admin } = req.body;\r\n  /* istanbul ignore next */const role = (admin === true) ? 'admin' : 'attendant';\r\n\r\n  const text = 'UPDATE users SET role=$1 WHERE id=$2 returning *;';\r\n  const values = [role, userId];\r\n\r\n  pool.query(text, values)\r\n    .then((user) => {\r\n      const adminUser = user.rows[0];\r\n      /* istanbul ignore next */return (!adminUser) ? Promise.reject(userId) : adminUser;\r\n    })\r\n    .then((newAdmin) => {\r\n      res.status(200).json({ newAdmin });\r\n    })\r\n    .catch((errorId) => {\r\n      res.status(404).json({ error: `user id, ${errorId} does not exist` });\r\n    });\r\n}\r\n\r\nexport default {\r\n  addUser, login, getAllUsers, getUser, updateUserData, deleteUser, giveAdminRight,\r\n};\r\n"],"file":"userController.js"}