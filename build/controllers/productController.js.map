{"version":3,"sources":["../../server/controllers/productController.js"],"names":["ProductController","req","res","query","text","values","pool","then","all","allProducts","rows","status","json","catch","err","available","availableProducts","finished","finishedProducts","productId","params","productArray","product","error","body","productName","productCategory","quantityLeft","quantitySold","price","minQuantity","data","newProduct","updatedProduct","rowCount","quantityleft","dbQuantitySold","quantitysold","newQuantityLeft","Number","newQuantitySold","queryText","queryValues","deletedProduct"],"mappings":"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","sourcesContent":["import pool from '../models/migration';\r\n\r\nclass ProductController {\r\n  static getAllProducts(req, res) {\r\n    const query = {\r\n      text: 'SELECT * FROM products',\r\n      values: [],\r\n    };\r\n\r\n    pool.query(query)\r\n      .then((all) => {\r\n        const allProducts = all.rows;\r\n        res.status(200).json({ allProducts });\r\n      })\r\n      .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n  }\r\n\r\n  static getAvailableProducts(req, res) {\r\n    const query = {\r\n      text: 'SELECT * FROM products where quantityLeft > 0',\r\n    };\r\n\r\n    pool.query(query)\r\n      .then((available) => {\r\n        const availableProducts = available.rows;\r\n        res.status(200).json({ availableProducts });\r\n      })\r\n      .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n  }\r\n\r\n  static getFinishedProducts(req, res) {\r\n    const query = {\r\n      text: 'SELECT * FROM products where quantityLeft < 1',\r\n    };\r\n\r\n    pool.query(query)\r\n      .then((finished) => {\r\n        const finishedProducts = finished.rows;\r\n        res.status(200).json({ finishedProducts });\r\n      })\r\n      .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n  }\r\n\r\n  static getSpecificProduct(req, res) {\r\n    const { productId } = req.params;\r\n\r\n    const query = {\r\n      text: 'SELECT * FROM products WHERE id = $1;',\r\n      values: [productId],\r\n    };\r\n\r\n    pool.query(query)\r\n      .then((productArray) => {\r\n        const product = productArray.rows[0];\r\n        if (product) {\r\n          res.status(200).json({ product });\r\n        } else {\r\n          res.status(404).json({ error: `product with id of '${productId}' does not exist` });\r\n        }\r\n      })\r\n      .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n  }\r\n\r\n  static addProduct(req, res) {\r\n    const {\r\n      productName, productCategory, quantityLeft, quantitySold, price, minQuantity,\r\n    } = req.body;\r\n\r\n    const query = {\r\n      text: 'INSERT INTO products(productName, productCategory, quantityLeft, quantitySold, price, minQuantity) VALUES($1, $2, $3, $4, $5, $6) RETURNING *',\r\n      values: [productName, productCategory, quantityLeft, quantitySold, price, minQuantity],\r\n    };\r\n\r\n    // check if product name already exists. product name should be unique\r\n    pool.query('SELECT * FROM products WHERE productName=$1;', [productName])\r\n      .then((data) => {\r\n        if (!data.rows[0]) {\r\n          pool.query(query)\r\n            .then((productArray) => {\r\n              const newProduct = productArray.rows[0];\r\n              res.status(201).json({ newProduct });\r\n            })\r\n            .catch((err) => {\r\n              /* istanbul ignore next */res.status(500).json(err);\r\n            });\r\n        } else {\r\n          res.status(409).json({ error: 'product name alread exists. choose another name' });\r\n        }\r\n      })\r\n      .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n  }\r\n\r\n  static updateProductDetails(req, res) {\r\n    const {\r\n      productName, productCategory, quantityLeft, price, minQuantity,\r\n    } = req.body;\r\n    const { productId } = req.params;\r\n\r\n    const query = {\r\n      text: 'UPDATE products SET productName = $1, productCategory =$2, quantityLeft = $3, price = $4, minQuantity = $5 WHERE id = $6 RETURNING *;',\r\n      values: [productName, productCategory, quantityLeft, price, minQuantity, productId],\r\n    };\r\n\r\n    // check if product name already exists. product name should be unique\r\n    pool.query('SELECT * FROM products WHERE productName=$1;', [productName])\r\n      .then((data) => {\r\n        if (!data.rows[0]) {\r\n          pool.query(query)\r\n            .then((productArray) => {\r\n              const updatedProduct = productArray.rows[0];\r\n              if (updatedProduct) {\r\n                res.status(200).json({ updatedProduct });\r\n              } else {\r\n                res.status(404).json({ error: 'product with supplied id does not exist' });\r\n              }\r\n            })\r\n            .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n        } else {\r\n          res.status(409).json({ error: 'product name alread exists. choose another name' });\r\n        }\r\n      })\r\n      .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n  }\r\n\r\n  static updateQuantitySold(req, res) {\r\n    const { quantitySold } = req.body;\r\n    const { productId } = req.params;\r\n\r\n    pool.query('SELECT quantityLeft, quantitySold FROM products WHERE id = $1;', [productId])\r\n      .then((data) => {\r\n        if (data.rowCount) {\r\n          const { quantityleft, quantitysold: dbQuantitySold } = data.rows[0];\r\n          const newQuantityLeft = Number(quantityleft) - Number(quantitySold);\r\n\r\n          if (newQuantityLeft >= 0) {\r\n            const newQuantitySold = Number(quantitySold) + Number(dbQuantitySold);\r\n            const queryText = 'UPDATE products SET quantityLeft=$1, quantitySold=$2 WHERE id=$3 RETURNING *;';\r\n            const queryValues = [newQuantityLeft, newQuantitySold, productId];\r\n\r\n            pool.query(queryText, queryValues)\r\n              .then((productArray) => {\r\n                const updatedProduct = productArray.rows[0];\r\n                if (updatedProduct) {\r\n                  res.status(200).json({ updatedProduct });\r\n                } else {\r\n                  res.status(404).json({ error: 'product id supplied does not exist' });\r\n                }\r\n              })\r\n              .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n          } else {\r\n            res.status(422).json({ error: 'quantity sold surpasses available quantity' });\r\n          }\r\n        } else {\r\n          res.status(404).json({ error: 'product id supplied does not exist' });\r\n        }\r\n      })\r\n      .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n  }\r\n\r\n  static deleteProduct(req, res) {\r\n    const { productId } = req.params;\r\n\r\n    pool.query('DELETE FROM products WHERE id = $1 RETURNING *;', [productId])\r\n      .then((productArray) => {\r\n        const deletedProduct = productArray.rows[0];\r\n        if (deletedProduct) {\r\n          res.status(200).json({ deletedProduct });\r\n        } else {\r\n          res.status(404).json({ error: 'product with supplied id does not exist' });\r\n        }\r\n      })\r\n      .catch(/* istanbul ignore next */err => res.status(500).json(err));\r\n  }\r\n}\r\n\r\nexport default ProductController;\r\n"],"file":"productController.js"}