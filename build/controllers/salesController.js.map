{"version":3,"sources":["../../server/controllers/salesController.js"],"names":["getAllSales","req","res","query","text","values","pool","then","sale","allSales","rows","status","json","catch","err","getSpecificSale","saleId","params","requestedSale","id","message","addSale","body","seller","productName","quantitySold","price","total","productId","newSale","query1","data","quantityleft","quantitysold","newQuantityLeft","Number","newQuantitySold","query2","product","updatedProduct"],"mappings":"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","sourcesContent":["import pool from '../models/migration';\r\n\r\nfunction getAllSales(req, res) {\r\n  const query = {\r\n    text: 'SELECT * FROM sales',\r\n    values: [],\r\n  };\r\n\r\n  pool.query(query)\r\n    .then((sale) => {\r\n      const allSales = sale.rows;\r\n      res.status(200).json({ allSales });\r\n    })\r\n    .catch((err) => {\r\n      res.status(500).json(err);\r\n    });\r\n}\r\n\r\nfunction getSpecificSale(req, res) {\r\n  const { saleId } = req.params;\r\n\r\n  const query = {\r\n    text: 'SELECT * FROM sales WHERE id = $1;',\r\n    values: [saleId],\r\n  };\r\n\r\n  pool.query(query)\r\n    .then((sale) => {\r\n      const requestedSale = sale.rows[0];\r\n      return requestedSale;\r\n    })\r\n    .then((sale) => {\r\n      const { id } = sale;\r\n      if (typeof id === 'number') {\r\n        return res.status(200).json({ sale });\r\n      }\r\n      return res.status(404).json({ message: 'sorry, the sale record does not exist' });\r\n    })\r\n    .catch(() => {\r\n      res.status(404).json({ message: 'sorry, the sale record does not exist' });\r\n    });\r\n}\r\n\r\nfunction addSale(req, res) {\r\n  const {\r\n    seller, productName, quantitySold, price, total, productId,\r\n  } = req.body;\r\n\r\n  const query = {\r\n    text: 'INSERT INTO sales(seller, productName, quantity, price, total) VALUES($1, $2, $3, $4, $5) RETURNING *',\r\n    values: [seller, productName, quantitySold, price, total],\r\n  };\r\n\r\n  pool.query(query)\r\n    .then((sale) => {\r\n      const newSale = sale.rows[0];\r\n      return newSale;\r\n    })\r\n    .then((newSale) => {\r\n      const query1 = {\r\n        text: 'SELECT quantityleft,quantitysold FROM products WHERE id = $1;',\r\n        values: [productId],\r\n      };\r\n      pool.query(query1)\r\n        .then((data) => {\r\n          const { quantityleft, quantitysold } = data.rows[0];\r\n          const newQuantityLeft = Number(quantityleft) - Number(quantitySold);\r\n          const newQuantitySold = Number(quantitysold) + Number(quantitySold);\r\n          return { newQuantityLeft, newQuantitySold };\r\n        })\r\n        .then((data) => {\r\n          const { newQuantityLeft, newQuantitySold } = data;\r\n          const query2 = {\r\n            text: 'UPDATE products SET quantityleft = $1, quantitysold = $2 WHERE id = $3;',\r\n            values: [newQuantityLeft, newQuantitySold, productId],\r\n          };\r\n          pool.query(query2)\r\n            .then((product) => {\r\n              const updatedProduct = product;\r\n              return updatedProduct;\r\n            })\r\n            .catch((err) => {\r\n              res.status(500).json(err);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          res.status(500).json(err);\r\n        });\r\n      return newSale;\r\n    })\r\n    .then((newSale) => {\r\n      res.status(201).json({ newSale });\r\n    })\r\n    .catch((err) => {\r\n      res.status(500).json(err);\r\n    });\r\n}\r\n\r\nexport default { getAllSales, getSpecificSale, addSale };\r\n"],"file":"salesController.js"}