{"version":3,"sources":["../../../server/test/controllers/userController.js"],"names":["chai","use","chaiHttp","expect","admin","mocks","attendant","newAttendant","emptyFields","unknownUser","adminToken","describe","before","done","request","app","post","send","end","err","res","body","token","context","it","set","to","equal","status","be","an","username","email","data","undefined","success","message","a","that","equals","error"],"mappings":"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","file":"userController.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport app from '../../app';\r\nimport mocks from './mocks/userData';\r\n\r\nchai.use(chaiHttp);\r\n\r\nconst { expect } = chai;\r\n\r\nconst {\r\n  admin, attendant, newAttendant, emptyFields, unknownUser,\r\n} = mocks;\r\n\r\nlet adminToken;\r\n\r\ndescribe('Users', () => {\r\n  before((done) => {\r\n    chai.request(app)\r\n      .post('/api/v1/auth/login')\r\n      .send(admin)\r\n      .end((err, res) => {\r\n        adminToken = res.body.token;\r\n        done();\r\n      });\r\n  });\r\n  context('Add / signup a new store attendant', () => {\r\n    it('Should add new attendant if data is correct', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/auth/signup')\r\n        .set('Authorization', adminToken)\r\n        .send(newAttendant)\r\n        .end((err, res) => {\r\n          expect(err).to.equal(null);\r\n          expect(res.status).to.equal(201);\r\n          expect(res).to.be.an('object');\r\n          expect(res.body.newAttendant.username).to.equal('Onyenze');\r\n          expect(res.body.newAttendant.email).to.equal('addattendant@gmail.com');\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should return error if not admin', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/auth/signup')\r\n        .set('Authorization', 'anonimous')\r\n        .send({ newAttendant })\r\n        .end((err, res) => {\r\n          expect(res.body.data).to.equal(undefined);\r\n          expect(res.body.success).to.equal(false);\r\n          expect(res.status).to.equal(401);\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should return 422 error if admin has supplied unacceptable username or password', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/auth/signup')\r\n        .set('Authorization', '3toremana8a')\r\n        .end((err, res) => {\r\n          expect(res.status).to.equal(422);\r\n          expect(res.body.message).to.be.a('string').that.equals('Username or password incorrect');\r\n          done();\r\n        });\r\n    });\r\n  });\r\n\r\n  context('Tests for Login route', () => {\r\n    it('should return a 422 if username or password fields are empty', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/auth/login')\r\n        .send(emptyFields)\r\n        .end((err, res) => {\r\n          expect(err).to.equal(null);\r\n          expect(res.status).to.equal(422);\r\n          expect(res.body.error).to.equal(true);\r\n          expect(res.body.message).to.equal('username and password fields must not be empty');\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should return a 401 for wrong username or password', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/auth/login')\r\n        .send(unknownUser)\r\n        .end((err, res) => {\r\n          expect(err).to.equal(null);\r\n          expect(res.status).to.equal(401);\r\n          expect(res.body.error).to.equal(true);\r\n          expect(res.body.message).to.equal('sorry username and password have no match');\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should return username and token for correct data', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/auth/login')\r\n        .send(attendant)\r\n        .end((err, res) => {\r\n          expect(err).to.equal(null);\r\n          expect(res.status).to.equal(200);\r\n          expect(res.body.username).to.be.a('string');\r\n          expect(res.body.token).to.be.a('string');\r\n          done();\r\n        });\r\n    });\r\n  });\r\n});\r\n"]}