{"version":3,"sources":["../../../server/test/controllers/userController.js"],"names":["chai","use","chaiHttp","expect","admin","mocks","attendant","newAttendant","emptyFields","unknownUser","adminToken","attendantToken","describe","before","done","request","app","post","send","end","err","res","body","token","it","to","equal","status","error","message","username","be","a","set","an","have","property"],"mappings":"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","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport app from '../../app';\r\nimport mocks from './mocks/userData';\r\n\r\nchai.use(chaiHttp);\r\n\r\nconst { expect } = chai;\r\n\r\nconst {\r\n  admin, attendant, newAttendant, emptyFields, unknownUser,\r\n} = mocks;\r\n\r\nlet adminToken;\r\nlet attendantToken;\r\n\r\ndescribe('Users', () => {\r\n  before((done) => {\r\n    chai.request(app)\r\n      .post('/api/v1/auth/login')\r\n      .send(admin)\r\n      .end((err, res) => {\r\n        adminToken = res.body.token;\r\n      });\r\n    chai.request(app)\r\n      .post('/api/v1/auth/login')\r\n      .send(attendant)\r\n      .end((err, res) => {\r\n        attendantToken = res.body.token;\r\n        done();\r\n      });\r\n  });\r\n\r\n  describe('Tests for Login route', () => {\r\n    it('should return a 422 if username or password fields are empty', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/auth/login')\r\n        .send(emptyFields)\r\n        .end((err, res) => {\r\n          expect(err).to.equal(null);\r\n          expect(res.status).to.equal(422);\r\n          expect(res.body.error).to.equal(true);\r\n          expect(res.body.message).to.equal('username and password fields must not be empty');\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should return a 401 for wrong username or password', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/auth/login')\r\n        .send(unknownUser)\r\n        .end((err, res) => {\r\n          expect(err).to.equal(null);\r\n          expect(res.status).to.equal(401);\r\n          expect(res.body.error).to.equal(true);\r\n          expect(res.body.message).to.equal('user does not exist');\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should return username and token for correct data', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/auth/login')\r\n        .send(attendant)\r\n        .end((err, res) => {\r\n          expect(err).to.equal(null);\r\n          expect(res.status).to.equal(200);\r\n          expect(res.body.username).to.be.a('string');\r\n          expect(res.body.token).to.be.a('string');\r\n          done();\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('Add / signup a new store attendant', () => {\r\n    it('Should add new attendant if data is correct', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/auth/signup')\r\n        .set('Authorization', adminToken)\r\n        .send(newAttendant)\r\n        .end((err, res) => {\r\n          expect(err).to.equal(null);\r\n          expect(res.status).to.equal(201);\r\n          expect(res).to.be.an('object');\r\n          expect(res.body).to.have.property('newAttendant');\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should return a 401 and error message if not admin', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/auth/signup')\r\n        .set('Authorization', attendantToken)\r\n        .send(newAttendant)\r\n        .end((err, res) => {\r\n          expect(res.status).to.equal(401);\r\n          expect(res.body.message).to.equal('Sorry, accessible to admin only');\r\n          done();\r\n        });\r\n    });\r\n  });\r\n});\r\n"],"file":"userController.js"}