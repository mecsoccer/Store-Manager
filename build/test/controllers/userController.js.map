{"version":3,"sources":["../../../server/test/controllers/userController.js"],"names":["chai","use","chaiHttp","expect","describe","context","it","done","request","app","post","set","send","username","password","email","end","err","res","status","to","equal","be","an","name","a","that","includes","productSold","equals","noOfSales","worthOfSales","data","success","message","t0"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,eAAKC,GAAL,CAASC,kBAAT;;IAEQC,M,GAAWH,c,CAAXG,M;;;AAERC,SAAS,OAAT,EAAkB,YAAM;AACtBC,UAAQ,gCAAR,EAA0C,YAAM;AAC9CC,OAAG,2BAAH,EAAgC,UAACC,IAAD,EAAU;AACxCP,qBAAKQ,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,cADR,EAEGC,GAFH,CAEO,eAFP,EAEwB,cAFxB,EAGGC,IAHH,CAGQ;AACJC,kBAAU,SADN;AAEJC,kBAAU,aAFN;AAGJC,eAAO;AAHH,OAHR,EAQGC,GARH,CAQO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,eAAOe,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAlB,eAAOe,GAAP,EAAYE,EAAZ,CAAeE,EAAf,CAAkBC,EAAlB,CAAqB,QAArB;AACApB,eAAOe,IAAIM,IAAX,EAAiBJ,EAAjB,CAAoBC,KAApB,CAA0B,SAA1B;AACAlB,eAAOe,IAAIH,KAAX,EAAkBK,EAAlB,CAAqBE,EAArB,CAAwBG,CAAxB,CAA0B,QAA1B,EAAoCC,IAApC,CAAyCC,QAAzC,CAAkD,GAAlD;AACAxB,eAAOe,IAAIU,WAAX,EAAwBR,EAAxB,CAA2BE,EAA3B,CAA8BG,CAA9B,CAAgC,QAAhC,EAA0CC,IAA1C,CAA+CG,MAA/C,CAAsD,CAAtD;AACA1B,eAAOe,IAAIY,SAAX,EAAsBV,EAAtB,CAAyBE,EAAzB,CAA4BG,CAA5B,CAA8B,QAA9B,EAAwCC,IAAxC,CAA6CG,MAA7C,CAAoD,CAApD;AACA1B,eAAOe,IAAIa,YAAX,EAAyBX,EAAzB,CAA4BE,EAA5B,CAA+BG,CAA/B,CAAiC,QAAjC,EAA2CC,IAA3C,CAAgDG,MAAhD,CAAuD,CAAvD;AACAtB;AACD,OAjBH;AAkBD,KAnBD;;AAqBAD,OAAG,kCAAH,EAAuC,UAACC,IAAD,EAAU;AAC/CP,qBAAKQ,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,cADR,EAEGC,GAFH,CAEO,eAFP,EAEwB,WAFxB,EAGGC,IAHH,CAGQ;AACJC,kBAAU,SADN;AAEJC,kBAAU;AAFN,OAHR,EAOGE,GAPH,CAOO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,eAAOe,IAAIc,IAAX,EAAiBZ,EAAjB,CAAoBC,KAApB,CAA0B,IAA1B;AACAlB,eAAOe,IAAIe,OAAX,EAAoBb,EAApB,CAAuBC,KAAvB,CAA6B,KAA7B;AACAlB,eAAOe,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAd;AACD,OAZH;AAaD,KAdD;;AAgBAD,OAAG,4EAAH,EAAiF,UAACC,IAAD,EAAU;AACzFP,qBAAKQ,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,cADR,EAEGC,GAFH,CAEO,eAFP,EAEwB,cAFxB,EAGGK,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,eAAOe,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAlB,eAAOe,IAAIgB,OAAX,EAAoBC,EAApB,CAAuBb,EAAvB,CAA0BG,CAA1B,CAA4B,QAA5B,EAAsCC,IAAtC,CAA2CG,MAA3C,CAAkD,oCAAlD;AACAtB;AACD,OAPH;AAQD,KATD;AAUD,GAhDD;AAiDD,CAlDD","file":"userController.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport app from '../../../app';\r\nimport addAttendant from '../../controllers/userController';\r\n\r\nchai.use(chaiHttp);\r\n\r\nconst { expect } = chai;\r\n\r\ndescribe('Users', () => {\r\n  context('post requests for user sign-up', () => {\r\n    it('Should post new user data', (done) => {\r\n      chai.request(app)\r\n        .post('/auth/signup')\r\n        .set('Authorization', 'Bearer admin')\r\n        .send({\r\n          username: 'Onyenze',\r\n          password: 'attendant01',\r\n          email: 'addAttendant@mail.com',\r\n        })\r\n        .end((err, res) => {\r\n          expect(res.status).to.equal(200);\r\n          expect(res).to.be.an('object');\r\n          expect(res.name).to.equal('Onyenze');\r\n          expect(res.email).to.be.a('string').that.includes('@');\r\n          expect(res.productSold).to.be.a('number').that.equals(0);\r\n          expect(res.noOfSales).to.be.a('number').that.equals(0);\r\n          expect(res.worthOfSales).to.be.a('number').that.equals(0);\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should return error if not admin', (done) => {\r\n      chai.request(app)\r\n        .post('/auth/signup')\r\n        .set('Authorization', 'anonimous')\r\n        .send({\r\n          username: 'Onyenze',\r\n          password: 'attendant01',\r\n        })\r\n        .end((err, res) => {\r\n          expect(res.data).to.equal(null);\r\n          expect(res.success).to.equal(false);\r\n          expect(res.status).to.equal(401);\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should return 422 error if admin has not supplied any username or password', (done) => {\r\n      chai.request(app)\r\n        .post('/auth/signup')\r\n        .set('Authorization', 'Bearer admin')\r\n        .end((err, res) => {\r\n          expect(res.status).to.equal(422);\r\n          expect(res.message).t0.be.a('string').that.equals('Username and password are required');\r\n          done();\r\n        });\r\n    });\r\n  });\r\n});\r\n"]}