{"version":3,"sources":["../../../server/test/controllers/productController.js"],"names":["chai","use","chaiHttp","expect","getAll","get","describe","context","it","done","request","app","end","err","res","to","be","null","have","status","an","body","message","equal","post","send","name","category","price","set","newProduct","property"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,eAAKC,GAAL,CAASC,kBAAT;;AAEA,IAAMC,SAASH,eAAKG,MAApB;AACA,IAAMC,SAASC,4BAAID,MAAnB;;AAEAE,SAAS,UAAT,EAAqB,YAAM;AACzBC,SAAQ,4BAAR,EAAsC,YAAM;AAC1CC,KAAG,wBAAH,EAA6B,UAACC,IAAD,EAAU;AACrCT,kBAAKU,OAAL,CAAaC,aAAb,EACAN,GADA,CACI,kBADJ,EAEAO,GAFA,CAEI,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClBX,WAAOU,GAAP,EAAYE,EAAZ,CAAeC,EAAf,CAAkBC,IAAlB;AACAd,WAAOW,GAAP,EAAYC,EAAZ,CAAeG,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAhB,WAAOW,GAAP,EAAYC,EAAZ,CAAeC,EAAf,CAAkBI,EAAlB,CAAqB,QAArB;AACAX;AACA,IAPA;AAQD,GATD;;AAWAD,KAAG,mCAAH,EAAwC,UAACC,IAAD,EAAU;AAChDT,kBAAKU,OAAL,CAAaC,aAAb,EACAN,GADA,CACI,oBADJ,EAEAO,GAFA,CAEI,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClBX,WAAOU,GAAP,EAAYE,EAAZ,CAAeC,EAAf,CAAkBC,IAAlB;AACAd,WAAOW,GAAP,EAAYC,EAAZ,CAAeG,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAhB,WAAOW,GAAP,EAAYC,EAAZ,CAAeC,EAAf,CAAkBI,EAAlB,CAAqB,QAArB;AACAX;AACA,IAPA;AAQD,GATD;;AAWAD,KAAG,+CAAH,EAAoD,UAACC,IAAD,EAAU;AAC5DT,kBAAKU,OAAL,CAAaC,aAAb,EACAN,GADA,CACI,qBADJ,EAEAO,GAFA,CAEI,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClBX,WAAOW,GAAP,EAAYC,EAAZ,CAAeG,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAhB,WAAOW,IAAIO,IAAJ,CAASC,OAAhB,EAAyBP,EAAzB,CAA4BQ,KAA5B,CAAkC,+BAAlC;AACAd;AACA,IANA;AAOD,GARD;AASD,EAhCD;;AAkCAF,SAAQ,6BAAR,EAAuC,YAAM;AAC3CC,KAAG,sDAAH,EAA2D,UAACC,IAAD,EAAU;AACnET,kBAAKU,OAAL,CAAaC,aAAb,EACAa,IADA,CACK,kBADL,EAEAC,IAFA,CAEK;AACDC,UAAM,MADL;AAEDC,cAAU,YAFT;AAGD,gBAAY,EAHX;AAIJ,gBAAY,EAJR;AAKDC,WAAO,GALN;AAMD,eAAW;AANV,IAFL,EAUAhB,GAVA,CAUI,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClBX,WAAOW,IAAIO,IAAJ,CAASC,OAAhB,EAAyBP,EAAzB,CAA4BQ,KAA5B,CAAkC,iCAAlC;AACApB,WAAOW,GAAP,EAAYC,EAAZ,CAAeG,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAV;AACA,IAdA;AAeD,GAhBD;;AAkBAD,KAAG,+BAAH,EAAoC,UAACC,IAAD,EAAU;AAC5CT,kBAAKU,OAAL,CAAaC,aAAb,EACAa,IADA,CACK,kBADL,EAEAK,GAFA,CAEI,eAFJ,EAEqB,cAFrB,EAGAJ,IAHA,CAGK;AACDC,UAAM,MADL;AAEDC,cAAU,YAFT;AAGD,gBAAY,EAHX;AAIJ,gBAAY,EAJR;AAKDC,WAAO,GALN;AAMD,eAAW;AANV,IAHL,EAWAhB,GAXA,CAWI,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClBX,WAAOW,IAAIO,IAAJ,CAASS,UAAhB,EAA4Bf,EAA5B,CAA+BG,IAA/B,CAAoCa,QAApC,CAA6C,IAA7C;AACA5B,WAAOW,GAAP,EAAYC,EAAZ,CAAeG,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAV;AACA,IAfA;AAgBD,GAjBD;AAkBD,EArCD;AAsCD,CAzED","file":"productController.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport get from '../../controllers/productController';\nimport app from '../../../app';\n\nchai.use(chaiHttp);\n\nconst expect = chai.expect;\nconst getAll = get.getAll;\n\ndescribe('products', () => {\n  context('#get requests for products', () => {\n    it('Should return products', (done) => {\n      chai.request(app)\n\t\t\t  .get('/api/v1/products')\n\t\t\t  .end((err, res) => {\n\t\t\t\t  expect(err).to.be.null;\n\t\t\t\t  expect(res).to.have.status(200);\n\t\t\t\t  expect(res).to.be.an('object');\n\t\t\t\t  done();\n\t\t\t  });\n    });\n\n    it('Should return an existing product', (done) => {\n      chai.request(app)\n\t\t\t  .get('/api/v1/products/1')\n\t\t\t  .end((err, res) => {\n\t\t\t\t  expect(err).to.be.null;\n\t\t\t\t  expect(res).to.have.status(200);\n\t\t\t\t  expect(res).to.be.an('object');\n\t\t\t\t  done();\n\t\t\t  });\n    });\n\n    it('Should not return product for non-existent id', (done) => {\n      chai.request(app)\n\t\t\t  .get('/api/v1/products/20')\n\t\t\t  .end((err, res) => {\n\t\t\t\t  expect(res).to.have.status(404);\n\t\t\t\t  expect(res.body.message).to.equal('Sorry, product does not exist');\n\t\t\t\t  done();\n\t\t\t  });\n    });\n  });\n\n  context('#post requests for products', () => {\n    it('Should not post products to the store for non-admins', (done) => {\n      chai.request(app)\n\t\t\t  .post('/api/v1/products')\n\t\t\t  .send({\n          name: 'junk',\n          category: 'provisions',\n          'qty-left': 20,\n\t\t\t\t\t  'qty-sold': 10,\n          price: 800,\n          'min-qty': 4,\n        })\n\t\t\t  .end((err, res) => {\n\t\t\t\t  expect(res.body.message).to.equal('Sorry, accessible to admin only');\n\t\t\t\t  expect(res).to.have.status(401);\n\t\t\t\t  done();\n\t\t\t  });\n    });\n\n    it('Should post products if admin', (done) => {\n      chai.request(app)\n\t\t\t  .post('/api/v1/products')\n\t\t\t  .set('Authorization', 'Bearer admin')\n\t\t\t  .send({\n          name: 'junk',\n          category: 'provisions',\n          'qty-left': 20,\n\t\t\t\t\t  'qty-sold': 10,\n          price: 800,\n          'min-qty': 4,\n        })\n\t\t\t  .end((err, res) => {\n\t\t\t\t  expect(res.body.newProduct).to.have.property('id');\n\t\t\t\t  expect(res).to.have.status(201);\n\t\t\t\t  done();\n\t\t\t  });\n    });\n  });\n});\n"]}