{"version":3,"sources":["../../../server/test/controllers/productController.js"],"names":["chai","use","chaiHttp","expect","describe","context","it","done","request","app","get","end","err","res","to","equal","have","status","be","an","null","body","message","post","send","name","category","price","set","newProduct","property"],"mappings":"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","file":"productController.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport app from '../../app';\r\n\r\nchai.use(chaiHttp);\r\n\r\nconst { expect } = chai;\r\n\r\ndescribe('products', () => {\r\n  context('#get requests for products', () => {\r\n    it('Should return all available products', (done) => {\r\n      chai.request(app)\r\n        .get('/api/v1/products')\r\n        .end((err, res) => {\r\n          expect(err).to.equal(null);\r\n          expect(res).to.have.status(200);\r\n          expect(res).to.be.an('object');\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should not return products that have run out of stock', (done) => {\r\n      chai.request(app)\r\n        .get('/api/v1/products/available')\r\n        .end((err, res) => {\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('Should return an existing product', (done) => {\r\n      chai.request(app)\r\n        .get('/api/v1/products/1')\r\n        .end((err, res) => {\r\n          expect(err).to.be.null;\r\n          expect(res).to.have.status(200);\r\n          expect(res).to.be.an('object');\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('Should not return product for non-existent id', (done) => {\r\n      chai.request(app)\r\n        .get('/api/v1/products/20')\r\n        .end((err, res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body.message).to.equal('Sorry, product does not exist');\r\n          done();\r\n        });\r\n    });\r\n  });\r\n\r\n  context('#post requests for products', () => {\r\n    it('Should not post products to the store for non-admins', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/products')\r\n        .send({\r\n          name: 'junk',\r\n          category: 'provisions',\r\n          'qty-left': 20,\r\n          'qty-sold': 10,\r\n          price: 800,\r\n          'min-qty': 4,\r\n        })\r\n        .end((err, res) => {\r\n          expect(res.body.message).to.equal('Sorry, accessible to admin only');\r\n          expect(res).to.have.status(401);\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('Should post products if admin', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/products')\r\n        .set('Authorization', 'Bearer admin')\r\n        .send({\r\n          name: 'junk',\r\n          category: 'provisions',\r\n          'qty-left': 20,\r\n          'qty-sold': 10,\r\n          price: 800,\r\n          'min-qty': 4,\r\n        })\r\n        .end((err, res) => {\r\n          expect(res.body.newProduct).to.have.property('id');\r\n          expect(res).to.have.status(201);\r\n          done();\r\n        });\r\n    });\r\n  });\r\n});\r\n"]}